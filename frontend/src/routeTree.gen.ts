/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as MeImport } from './routes/me'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'
import { Route as ParkingNewImport } from './routes/parking/new'
import { Route as ParkingIdentifierImport } from './routes/parking/$identifier'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthSigninImport } from './routes/auth/signin'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ParkingNewRoute = ParkingNewImport.update({
  id: '/parking/new',
  path: '/parking/new',
  getParentRoute: () => rootRoute,
} as any)

const ParkingIdentifierRoute = ParkingIdentifierImport.update({
  id: '/parking/$identifier',
  path: '/parking/$identifier',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthSigninRoute = AuthSigninImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/parking/$identifier': {
      id: '/parking/$identifier'
      path: '/parking/$identifier'
      fullPath: '/parking/$identifier'
      preLoaderRoute: typeof ParkingIdentifierImport
      parentRoute: typeof rootRoute
    }
    '/parking/new': {
      id: '/parking/new'
      path: '/parking/new'
      fullPath: '/parking/new'
      preLoaderRoute: typeof ParkingNewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/me': typeof MeRoute
  '/test': typeof TestRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/parking/$identifier': typeof ParkingIdentifierRoute
  '/parking/new': typeof ParkingNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/me': typeof MeRoute
  '/test': typeof TestRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/parking/$identifier': typeof ParkingIdentifierRoute
  '/parking/new': typeof ParkingNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/me': typeof MeRoute
  '/test': typeof TestRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/parking/$identifier': typeof ParkingIdentifierRoute
  '/parking/new': typeof ParkingNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/me'
    | '/test'
    | '/auth/signin'
    | '/auth/signup'
    | '/parking/$identifier'
    | '/parking/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/me'
    | '/test'
    | '/auth/signin'
    | '/auth/signup'
    | '/parking/$identifier'
    | '/parking/new'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/me'
    | '/test'
    | '/auth/signin'
    | '/auth/signup'
    | '/parking/$identifier'
    | '/parking/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  MeRoute: typeof MeRoute
  TestRoute: typeof TestRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  ParkingIdentifierRoute: typeof ParkingIdentifierRoute
  ParkingNewRoute: typeof ParkingNewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  MeRoute: MeRoute,
  TestRoute: TestRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  ParkingIdentifierRoute: ParkingIdentifierRoute,
  ParkingNewRoute: ParkingNewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/me",
        "/test",
        "/auth/signin",
        "/auth/signup",
        "/parking/$identifier",
        "/parking/new"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/auth/signin": {
      "filePath": "auth/signin.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/parking/$identifier": {
      "filePath": "parking/$identifier.tsx"
    },
    "/parking/new": {
      "filePath": "parking/new.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
