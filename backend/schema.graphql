type Query {
  me: UserType!
  health: HealthType!
  allParkings: [ParkingType]!
  parking(identifier: String!): ParkingType
  predictParking(datetime: DateTime!): String!
}

type UserType {
  identifier: UserID!
  name: String!
  email: String!
}

scalar UserID

type HealthType {
  status: String!
  time: DateTime!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type ParkingType {
  identifier: ParkingID!
  name: String!
  address: String!
  totalLots: Int!
  occupiedLots: Int!
  entries: [ParkingEntry]!
  latitude: String
  longitude: String
}

scalar ParkingID

type ParkingEntry {
  entryType: ParkingStatusEnum!
  createdAt: DateTime!
}

enum ParkingStatusEnum {
  ENTRANCE
  EXIT
}

type Mutation {
  createUser(
    email: String!
    name: String!
    password: String!
  ): CreateUserMutation!
  loginUser(email: String!, password: String!): LoginUserMutation!
  createParking(
    address: String!
    name: String!
    totalLots: Int!
  ): CreateParkingMutation!
  registerDevice(pushToken: String!): RegisterDeviceMutation!
  unregisterDevice(pushToken: String!): UnregisterDeviceMutation!
}

type CreateParkingMutation {
  parking: ParkingType!
}

type CreateUserMutation {
  user: UserType!
}

type LoginUserMutation {
  token: String!
}

type CreateParkingMutation {
  parking: ParkingType!
}
type RegisterDeviceMutation {
  success: Boolean!
}

type UnregisterDeviceMutation {
  success: Boolean!
}
